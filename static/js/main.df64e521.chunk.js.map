{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","className","onSubmit","id","type","placeholder","aria-label","aria-describedby","value","onChange","Component","TodoItem","title","handleDelete","onClick","TodoList","items","clearList","map","key","App","state","uuid","editItem","e","setState","target","preventDefault","newItem","console","log","updatedItems","filteredItems","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wPAEqBA,G,uLACP,IAAD,EACsCC,KAAKC,MAAzCC,EADF,EACEA,KAAMC,EADR,EACQA,aAAcC,EADtB,EACsBA,aAC3B,OACI,yBAAKC,UAAU,QACX,yBAAKA,UAAU,aACX,0BAAMC,SAAUF,GACZ,yBAAKC,UAAU,oBACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,yCAAyCE,GAAG,gBAAe,uBAAGF,UAAU,iBAE5F,2BAAOG,KAAK,OAAOH,UAAU,gBAAgBI,YAAY,kBAAkBC,aAAW,WAAWC,mBAAiB,eAAeC,MAAOV,EAAMW,SAAUV,KAE5J,4BAAQK,KAAK,SAASH,UAAU,6BAAhC,mB,GAbeS,cCClBC,E,iLACP,IAAD,EAC0Bf,KAAKC,MAA7Be,EADF,EACEA,MAAQC,EADV,EACUA,aACf,OACI,wBAAIZ,UAAU,uDACV,4BAAKW,GACL,yBAAKX,UAAU,aAIX,0BAAMA,UAAU,mBAAmBa,QAASD,GACxC,uBAAGZ,UAAU,uB,GAXCS,aCAjBK,E,iLACP,IAAD,EACuCnB,KAAKC,MAA1CmB,EADF,EACEA,MAAQC,EADV,EACUA,UAAaJ,EADvB,EACuBA,aAC5B,OACI,wBAAIZ,UAAU,cACV,wBAAIA,UAAU,eAAd,aAGIe,EAAME,KAAI,SAAApB,GACN,OACI,kBAAC,EAAD,CAAUqB,IAAKrB,EAAKK,GAAIS,MAAOd,EAAKc,MAAOC,aAAe,kBAAMA,EAAaf,EAAKK,UAI9F,4BAAQC,KAAK,SAASU,QAASG,EAAWhB,UAAU,kBAApD,qB,GAdsBS,a,gBCkEvBU,E,2MA5DbC,MAAO,CACLL,MAAM,GACNb,GAAGmB,cACHxB,KAAK,GACLyB,UAAS,G,EAEXxB,aAAe,SAACyB,GACd,EAAKC,SAAS,CACZ3B,KAAO0B,EAAEE,OAAOlB,S,EAGpBR,aAAe,SAACwB,GACdA,EAAEG,iBAEF,IAAMC,EAAU,CACbzB,GAAI,EAAKkB,MAAMlB,GAChBS,MAAM,EAAKS,MAAMvB,MAEnB+B,QAAQC,IAAIF,GACZ,IAAMG,EAAY,sBAAO,EAAKV,MAAML,OAAlB,CAAyBY,IAE3C,EAAKH,SAAS,CACZT,MAAMe,EACNjC,KAAK,GACLK,GAAGmB,cACHC,UAAS,K,EAGbN,UAAY,WACV,EAAKQ,SAAS,CACZT,MAAM,M,EAIVH,aAAe,SAACV,GACd,IAAM6B,EAAgB,EAAKX,MAAML,MAAMiB,QAAO,SAAAnC,GAAI,OAAIA,EAAKK,KAAOA,KAClE,EAAKsB,SAAS,CACZT,MAAOgB,K,wEAKT,OACE,6BACE,yBAAK/B,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,wBAAIA,UAAU,eAAd,cACA,kBAAC,EAAD,CAAWH,KAAMF,KAAKyB,MAAMvB,KAAOC,aAAcH,KAAKG,aAAcC,aAAcJ,KAAKI,eACvF,kBAAC,EAAD,CAAUgB,MAAOpB,KAAKyB,MAAML,MAAOC,UAAWrB,KAAKqB,UAAWJ,aAAcjB,KAAKiB,uB,GAlD7EH,aCIEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.df64e521.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class TodoInput extends Component {\n    render() {\n        const{ item, handleChange, handleSubmit} = this.props\n        return (\n            <div className=\"card\">\n                <div className=\"card-body\"> \n                    <form onSubmit={handleSubmit}>  \n                        <div className=\"input-group mb-3\">\n                            <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text text-white bg-primary\" id=\"basic-addon1\"><i className=\"fa fa-book\"></i></span>\n                            </div>\n                            <input type=\"text\" className=\"form-control \" placeholder=\"Add a Todo Item\" aria-label=\"Username\" aria-describedby=\"basic-addon1\" value={item} onChange={handleChange} />\n                        </div>\n                        <button type=\"submit\" className=\"btn btn-block btn-primary\">Add Item</button>\n                    </form>\n            </div>\n        </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport TodoInput from './TodoInput';\n\nexport default class TodoItem extends Component {\n    render() {\n        const {title , handleDelete} = this.props;\n        return (\n            <li className=\"list-group-item d-flex justify-content-between my-2\">\n                <h6>{title}</h6>\n                <div className=\"todo-icon\">\n                    {/* <span className=\"mx-2 text-success\">\n                        <i className=\"fa fa-pencil\"></i>\n                    </span> */}\n                    <span className=\"mx-2 text-danger\" onClick={handleDelete}>\n                        <i className=\"fa fa-trash\"></i>\n                    </span>\n                </div>\n            </li>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem';\n\nexport default class TodoList extends Component {\n    render() {\n        const {items , clearList ,  handleDelete} = this.props\n        return (\n            <ul className=\"list-group\">\n                <h3 className=\"text-center\">Todo List</h3>\n                \n                {\n                    items.map(item => {\n                        return(\n                            <TodoItem key={item.id} title={item.title} handleDelete={ () => handleDelete(item.id)} />     \n                        )\n                    })\n                }\n                <button type=\"button\" onClick={clearList} className=\"btn btn-danger\"> clear list </button> \n            </ul>\n        )\n    }\n}\n","import React, { Component } from 'react'; \nimport './App.css';\nimport TodoList from './components/TodoList';\nimport TodoItem from './components/TodoItem';\nimport TodoInput from './components/TodoInput';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { v4 as uuid} from 'uuid';\n\nclass App extends Component {\n  state ={\n    items:[],\n    id:uuid(),\n    item:'',\n    editItem:false\n  }\n  handleChange = (e) => {\n    this.setState({\n      item : e.target.value\n    })\n  }\n  handleSubmit = (e) => {\n    e.preventDefault();\n  \n    const newItem = { \n       id: this.state.id,\n      title:this.state.item\n    }\n    console.log(newItem);\n    const updatedItems = [...this.state.items, newItem]\n\n    this.setState({\n      items:updatedItems,\n      item:'',\n      id:uuid(),\n      editItem:false\n    })\n  }\n  clearList = () => {\n    this.setState({\n      items:[]\n    })\n  }\n\n  handleDelete = (id) => {\n    const filteredItems = this.state.items.filter(item => item.id !== id)\n    this.setState({\n      items: filteredItems\n    })\n  }\n\n  render(){\n    return (\n      <div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-offset-3 col-sm-6\">\n              <h3 className=\"text-center\">ToDO INPUT</h3>\n              <TodoInput item={this.state.item}  handleChange={this.handleChange} handleSubmit={this.handleSubmit} />\n              <TodoList items={this.state.items} clearList={this.clearList} handleDelete={this.handleDelete} />\n              \n            </div>\n          </div>\n        </div>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}